/*---------------------------------------------------------------------------*/
/*                                                                           */
/* bacp.h													    */
/*                                                                           */
/* Author : Mohamed REZGUI (m.rezgui06@gmail.com)                              */
/*                                                                           */
/*---------------------------------------------------------------------------*/
/* Copyright (c) 2015 Mohamed REZGUI. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY MOHAMED REZGUI ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MOHAMED REZGUI OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *----------------------------------------------------------------------------*/

#ifndef __MODELS_BACP_H__
#define __MODELS_H__

#include "../flatzinc.h"
#include "../stl_util.h"

#include <list>

using namespace std;
using namespace Gecode;

/// A course \relates BACP
class Course {
public:
    const char* name; ///< Course name
    int credit;       ///< Course credit
};

/// A curriculum \relates BACP
class Curriculum {
public:
    /// Number of periods
    int p;
    /// Minimum academic load
    int a;
    /// Maximum academic load
    int b;
    /// Minimum amount of courses
    int c;
    /// Maximum amount of courses
    int d;

    /// Courses
    const Course *courses;
    /// Prerequisites
    const char **prereqs;

    /// Undesired Periods
    const Course *undesired_courses;

};

namespace {

/** \name Parameters for balanced academic curriculum
    * \relates BACP
    * @{
    */

/// Courses for first example
const Course courses8[] = {
    {"dew100", 1},
    {"fis100", 3},
    {"hcw310", 1},{"iwg101", 2},{"mat190", 4},{"mat192", 4},{"dew101", 1},
    {"fis101", 5},{"iwi131", 3},{"mat191", 4},{"mat193", 4},{"fis102", 5},{"hxwxx1", 1},
    {"iei134", 3},{"iei141", 3},{"mat194", 4},
    {"dewxx0", 1},{"hcw311", 1},{"iei132", 3},{"iei133", 3},{"iei142", 3},{"iei162", 3},
    {"iwn170", 3},{"mat195", 3},{"hxwxx2", 1},{"iei231", 4},{"iei241", 4},{"iei271", 3},{"iei281", 3},{"iwn261", 3},
    {"hfw120", 2},{"iei233", 4},{"iei238", 3},{"iei261", 3},{"iei272", 3},{"iei273", 3},{"iei161", 3},{"iei232", 3},
    {"iei262", 3},{"iei274", 3},{"iwi365", 3},{"iwn270", 3},{"hrw130", 2},{"iei218", 3},{"iei219", 3},{"iei248", 3},
    {0,0}
};

/// Prerequisites for first example
const char* prereqs8[] = {
    "dew101","dew100",
    "fis101","fis100",
    "fis101","mat192",
    "mat191","mat190",
    "mat193","mat190",
    "mat193","mat192",
    "fis102","fis101",
    "fis102","mat193",
    "iei134","iwi131",
    "iei141","iwi131",
    "mat194","mat191 ",
    "mat194","mat193",
    "dewxx0","dew101",
    "hcw311","hcw310",
    "iei132","iei134",
    "iei133","iei134",
    "iei142","iei141",
    "mat195","mat194",
    "iei231","iei134",
    "iei241","iei142",
    "iei271","iei162",
    "iei281","mat195",
    "iei233","iei231",
    "iei238","iei231",
    "iei261","iwn261",
    "iei272","iei271",
    "iei273","iei271",
    "iei273","iei271",
    "iei161","iwn261",
    "iei161","iwn261",
    "iei232","iei273",
    "iei232","iei273",
    "iei262","iwn261",
    "iei274","iei273",
    "iei274","iei273",
    "iei219","iei232",
    "iei248","iei233",
    "iei248","iei233",
    0,0
};

/// Undesired Courses for first example
const Course undesired_courses8[] = {
    {0,0}
};

/// Courses for second example
const Course courses10[] = {
    {"dew100",1},
    {"fis100",3},
    {"hrwxx1",2},
    {"iwg101",2},
    {"mat021",5},
    {"qui010",3},
    {"dew101",1},
    {"fis110",5},
    {"hrwxx2",2},
    {"iwi131",3},
    {"mat022",5},
    {"dewxx0",1},
    {"fis120",4},
    {"hcw310",1},
    {"hrwxx3",2},
    {"ili134",4},
    {"ili151",3},
    {"mat023",4},
    {"hcw311",1},
    {"ili135",4},
    {"ili153",3},
    {"ili260",3},
    {"iwn261",3},
    {"mat024",4},
    {"fis130",4},
    {"ili239",4},
    {"ili245",4},
    {"ili253",4},
    {"fis140",4},
    {"ili236",4},
    {"ili243",4},
    {"ili270",3},
    {"ili280",4},
    {"ici344",4},
    {"ili263",3},
    {"ili332",4},
    {"ili355",4},
    {"iwn170",3},
    {"icdxx1",3},
    {"ili362",3},
    {"iwn270",3},
    {"icdxx2",3},
    {0,0}
};

/// Prerequisites for second example
const char* prereqs10[] = {
    "dew101","dew100",
    "fis110","fis100",
    "fis110","mat021",
    "mat022","mat021",
    "dewxx0","dew101",
    "fis120","fis110",
    "fis120","mat022",
    "ili134","iwi131",
    "ili151","iwi131",
    "mat023","mat022",
    "hcw311","hcw310",
    "ili135","ili134",
    "ili153","ili134",
    "ili153","ili151",
    "mat024","mat023",
    "fis130","fis110",
    "fis130","mat022",
    "ili239","ili135",
    "ili245","ili153",
    "ili253","ili153",
    "fis140","fis120",
    "fis140","fis130",
    "ili236","ili239",
    "ili243","ili245",
    "ili270","ili260",
    "ili270","iwn261",
    "ili280","mat024",
    "ici344","ili243",
    "ili263","ili260",
    "ili263","iwn261",
    "ili332","ili236",
    "ili355","ili153",
    "ili355","ili280",
    "ili362","ili263",
    0,0
};

/// Undesired Courses
const Course undesired_courses10[] = {
    {0,0}
};

/// Courses for third example
const Course courses12[] = {
    {"dew100",1},
    {"fis100",3},
    {"hcw310",1},
    {"iwg101",2},
    {"mat111",4},
    {"mat121",4},
    {"dew101",1},
    {"fis110",5},
    {"iwi131",3},
    {"mat112",4},
    {"mat122",4},
    {"dewxx0",1},
    {"fis120",4},
    {"hcw311",1},
    {"hxwxx1",1},
    {"ili142",4},
    {"mat113",4},
    {"mat123",4},
    {"fis130",4},
    {"ili134",4},
    {"ili151",3},
    {"iwm185",3},
    {"mat124",4},
    {"fis140",4},
    {"hxwxx2",1},
    {"ile260",3},
    {"ili260",3},
    {"iwn170",3},
    {"qui104",3},
    {"ili231",3},
    {"ili243",4},
    {"ili252",4},
    {"ili273",3},
    {"mat210",4},
    {"mat260",4},
    {"ild208",3},
    {"ili221",4},
    {"ili274",3},
    {"ili281",3},
    {"iwn270",3},
    {"mat270",4},
    {"hrw150",2},
    {"ili238",4},
    {"ili242",3},
    {"ili275",3},
    {"ili355",4},
    {"hrw110",2},
    {"ici393",4},
    {"ili237",4},
    {"ili334",4},
    {"ili363",3},
    {"iwn261",3},
    {"hrw100",2},
    {"ici382",4},
    {"ili331",4},
    {"ili362",3},
    {"ili381",3},
    {"iln230",3},
    {"ici313",2},
    {"ici315",2},
    {"ici332",3},
    {"ici344",4},
    {"icn336",3},
    {"iwi365",3},
    {"ici314",2},
    {"ici367",2},
    {0,0}
};

/// Prerequisites for third example
const char* prereqs12[] = {
    "dew101","dew100",
    "fis110","fis100",
    "fis110","mat121",
    "mat112","mat111",
    "mat122","mat111",
    "mat122","mat121",
    "dewxx0","dew101",
    "fis120","fis110",
    "fis120","mat122",
    "hcw311","hcw310",
    "ili142","iwi131",
    "mat113","mat112",
    "mat113","mat122",
    "mat123","mat112",
    "mat123","mat122",
    "fis130","fis110",
    "fis130","mat122",
    "ili134","iwi131",
    "ili151","mat112",
    "mat124","mat113",
    "mat124","mat123",
    "fis140","fis120",
    "fis140","fis130",
    "ile260","fis120",
    "ile260","mat124",
    "ili231","iwi131",
    "ili252","iwi131",
    "ili273","ili260",
    "mat210","mat113",
    "mat260","iwi131",
    "mat260","mat113",
    "mat260","mat123",
    "ili221","ili134",
    "ili221","ili231",
    "ili221","mat260",
    "ili274","ili273",
    "ili281","mat260",
    "mat270","iwi131",
    "mat270","mat113",
    "mat270","mat123",
    "ili238","ili134",
    "ili242","ili142",
    "ili275","ili274",
    "ili355","ili221",
    "hrw110","hrw150",
    "ici393","mat210",
    "ici393","mat260",
    "ili237","ili231",
    "ili237","ili252",
    "ili334","ili238",
    "ili363","ili273",
    "hrw100","hrw110",
    "ici382","ili334",
    "ili331","ili238",
    "ili331","ili274",
    "ili362","ili363",
    "ili381","ili281",
    "ili381","mat210",
    "iln230","iwn170",
    "ici313","ili331",
    "ici332","ici393",
    "ici332","ili331",
    "ici344","ili243",
    "icn336","ici393",
    "ici314","ici313",
    0,0
};

/// Undesired Courses
const Course undesired_courses12[] = {
    {0,0}
};

/// Courses for first example
const Course coursesUD1[] = {
    {"c6", 6},
    {"c7", 5},
    {"c9", 5},
    {"c11", 6},
    {"c12", 5},
    {"c13", 5},
    {"c14", 6},
    {"c15", 5},
    {"c18", 6},
    {"c19", 6},
    {"c20", 5},
    {"c23", 6},
    {"c24", 5},
    {"c26", 5},
    {"c27", 5},
    {"c29", 3},
    {"c30", 6},
    {"c32", 1},
    {"c33", 1},
    {"c34", 12},
    {"c35", 6},
    {"c36", 6},
    {"c37", 6},
    {"c44", 7},
    {"c45", 7},
    {"c46", 5},
    {"c47", 6},
    {"c49", 5},
    {"c51", 5},
    {"c52", 6},
    {"c53", 5},
    {"c55", 5},
    {"c56", 6},
    {"c57", 6},
    {"c58", 5},
    {"c59", 6},
    {"c60", 5},
    {"c61", 6},
    {"c62", 6},
    {"c64", 6},
    {"c69", 7},
    {"c70", 1},
    {"c71", 1},
    {"c72", 5},
    {"c73", 5},
    {"c74", 5},
    {"c77", 3},
    {"c78", 10},
    {"c80", 6},
    {"c85", 5},
    {"c88", 5},
    {"c89", 5},
    {"c91", 5},
    {"c92", 6},
    {"c94", 6},
    {"c95", 7},
    {"c97", 6},
    {"c98", 5},
    {"c99", 5},
    {"c101", 5},
    {"c103", 6},
    {"c104", 5},
    {"c105", 5},
    {"c106", 5},
    {"c107", 6},
    {"c108", 6},
    {"c109", 5},
    {"c110", 6},
    {"c112", 7},
    {"c113", 5},
    {"c114", 5},
    {"c115", 5},
    {"c116", 5},
    {"c117", 5},
    {"c118", 5},
    {"c121", 5},
    {"c122", 3},
    {"c123", 6},
    {"c124", 1},
    {"c125", 1},
    {"c126", 10},
    {"c127", 7},
    {"c128", 5},
    {"c131", 5},
    {"c132", 5},
    {"c133", 5},
    {"c137", 5},
    {"c143", 5},
    {"c148", 5},
    {"c149", 5},
    {"c150", 5},
    {"c153", 5},
    {"c162", 5},
    {"c163", 5},
    {"c171", 6},
    {"c173", 1},
    {"c174", 1},
    {"c177", 6},
    {"c178", 7},
    {"c179", 7},
    {"c180", 6},
    {"c181", 6},
    {"c184", 6},
    {"c185", 6},
    {"c188", 5},
    {"c189", 6},
    {"c191", 5},
    {"c193", 5},
    {"c195", 6},
    {"c196", 6},
    {"c197", 6},
    {"c198", 5},
    {"c199", 5},
    {"c200", 5},
    {"c201", 5},
    {"c203", 5},
    {"c204", 3},
    {"c205", 6},
    {"c206", 7},
    {"c207", 1},
    {"c208", 1},
    {"c210", 6},
    {"c211", 6},
    {"c212", 6},
    {"c213", 7},
    {"c214", 7},
    {"c215", 6},
    {"c216", 5},
    {"c217", 5},
    {"c218", 5},
    {"c219", 5},
    {"c220", 6},
    {"c221", 6},
    {"c223", 6},
    {"c224", 5},
    {"c225", 6},
    {"c226", 6},
    {"c227", 6},
    {"c228", 5},
    {"c230", 6},
    {"c231", 5},
    {"c232", 5},
    {"c233", 6},
    {"c236", 3},
    {"c237", 6},
    {"c238", 7},
    {"c239", 1},
    {"c240", 1},
    {"c241", 12},
    {"c243", 5},
    {"c247", 5},
    {"c249", 6},
    {"c252", 5},
    {"c253", 5},
    {"c254", 5},
    {"c257", 6},
    {"c261", 5},
    {"c271", 7},
    {"c274", 3},
    {"c275", 6},
    {"c277", 1},
    {"c278", 1},
    {"c279", 5},
    {"c280", 5},
    {"c281", 5},
    {"c467", 5},
    {"c468", 5},
    {"c471", 12},
    {"c473", 12},
    {"c680", 6},
    {"c681", 7},
    {"c682", 6},
    {"c683", 6},
    {"c685", 5},
    {"c687", 5},
    {"c689", 6},
    {"c690", 5},
    {"c691", 5},
    {"c692", 5},
    {"c693", 6},
    {"c694", 6},
    {"c695", 5},
    {"c696", 6},
    {"c697", 7},
    {"c698", 5},
    {"c699", 5},
    {"c700", 5},
    {"c701", 5},
    {"c703", 5},
    {"c704", 6},
    {"c705", 1},
    {"c706", 1},
    {"c708", 7},
    {"c710", 3},
    {"c722", 5},
    {"c723", 5},
    {"c732", 5},
    {"c733", 5},
    {"c734", 5},
    {"c741", 5},
    {"c742", 5},
    {"c746", 6},
    {"c767", 5},
    {"c769", 5},
    {"c770", 5},
    {"c771", 6},
    {"c772", 5},
    {"c773", 5},
    {"c777", 5},
    {"c778", 5},
    {"c779", 5},
    {"c780", 5},
    {"c781", 5},
    {"c837", 18},
    {"c838", 31},
    {"c875", 5},
    {"c881", 5},
    {"c882", 5},
    {"c883", 5},
    {"c884", 5},
    {"c892", 3},
    {"c893", 3},
    {"c894", 3},
    {"c895", 3},
    {"c896", 7},
    {"c897", 5},
    {"c898", 5},
    {"c899", 5},
    {"c900", 10},
    {"c901", 5},
    {"c904", 5},
    {"c905", 5},
    {"c907", 5},
    {"c910", 5},
    {"c931", 5},
    {"c935", 11},
    {"c945", 4},
    {"c946", 1},
    {"c953", 5},
    {"c955", 5},
    {"c963", 5},
    {"c969", 5},
    {"c972", 5},
    {"c975", 5},
    {"c978", 5},
    {"c980", 5},
    {"c983", 5},
    {"c998", 5},
    {"c999", 5},
    {"c1007", 6},
    {"c1008", 6},
    {"c1009", 6},
    {"c1013", 5},
    {"c1017", 5},
    {"c1018", 5},
    {"c1019", 5},
    {"c1020", 3},
    {"c1023", 3},
    {"c1027", 12},
    {"c1031", 12},
    {"c1032", 3},
    {"c1033", 12},
    {"c1034", 3},
    {"c1035", 6},
    {"c1036", 3},
    {"c1037", 5},
    {"c1042", 5},
    {"c1043", 20},
    {"c1045", 2},
    {"c1050", 1},
    {"c1051", 1},
    {"c1052", 1},
    {"c1058", 5},
    {"c1059", 1},
    {"c1060", 6},
    {"c1061", 10},
    {"c1069", 5},
    {"c1075", 1},
    {"c1076", 4},
    {"c1077", 5},
    {"c1078", 5},
    {"c1084", 5},
    {"c1085", 5},
    {"c1086", 5},
    {"c1087", 5},
    {"c1089", 6},
    {"c1090", 6},
    {"c1144", 6},
    {"c1145", 5},
    {"c1149", 3},
    {"c1151", 5},
    {"c1152", 5},
    {"c1155", 5},
    {"c1156", 5},
    {"c1157", 5},
    {"c1158", 5},
    {"c1161", 5},
    {"c1162", 5},
    {"c1163", 5},
    {"c1164", 5},
    {"c1168", 5},
    {"c1169", 5},
    {"c1170", 5},
    {"c1171", 5},
    {"c1180", 5},
    {"c1191", 5},
    {"c1192", 1},
    {0,0}
};

/// Prerequisites for first example
const char* prereqsUD1[] = {
    "c210","c11",
    "c210","c14",
    "c210","c15",
    "c210","c18",
    "c210","c19",
    "c210","c20",
    "c210","c24",
    "c210","c26",
    "c210","c27",
    "c210","c35",
    "c210","c36",
    "c210","c37",
    "c210","c80",
    "c210","c231",
    "c210","c88",
    "c210","c89",
    "c210","c253",
    "c210","c91",
    "c210","c92",
    "c210","c220",
    "c210","c221",
    "c210","c1020",
    "c211","c11",
    "c211","c14",
    "c211","c15",
    "c211","c18",
    "c211","c19",
    "c211","c20",
    "c211","c24",
    "c211","c26",
    "c211","c27",
    "c211","c35",
    "c211","c36",
    "c211","c37",
    "c211","c80",
    "c211","c231",
    "c211","c88",
    "c211","c89",
    "c211","c253",
    "c211","c91",
    "c211","c92",
    "c211","c220",
    "c211","c221",
    "c211","c1020",
    "c213","c6",
    "c213","c7",
    "c213","c216",
    "c213","c9",
    "c213","c224",
    "c213","c11",
    "c213","c12",
    "c213","c13",
    "c213","c14",
    "c213","c15",
    "c213","c18",
    "c213","c19",
    "c213","c20",
    "c213","c230",
    "c213","c23",
    "c213","c24",
    "c213","c212",
    "c213","c26",
    "c213","c27",
    "c213","c35",
    "c213","c36",
    "c213","c37",
    "c213","c80",
    "c213","c223",
    "c213","c231",
    "c213","c217",
    "c213","c218",
    "c213","c85",
    "c213","c88",
    "c213","c89",
    "c213","c253",
    "c213","c91",
    "c213","c92",
    "c213","c220",
    "c213","c221",
    "c213","c1020",
    "c214","c11",
    "c214","c14",
    "c214","c15",
    "c214","c18",
    "c214","c19",
    "c214","c20",
    "c214","c24",
    "c214","c26",
    "c214","c27",
    "c214","c35",
    "c214","c36",
    "c214","c37",
    "c214","c80",
    "c214","c231",
    "c214","c88",
    "c214","c89",
    "c214","c253",
    "c214","c91",
    "c214","c92",
    "c214","c220",
    "c214","c221",
    "c214","c1020",
    "c226","c11",
    "c226","c14",
    "c226","c15",
    "c226","c18",
    "c226","c19",
    "c226","c20",
    "c226","c24",
    "c226","c26",
    "c226","c27",
    "c226","c35",
    "c226","c36",
    "c226","c37",
    "c226","c80",
    "c226","c231",
    "c226","c88",
    "c226","c89",
    "c226","c253",
    "c226","c91",
    "c226","c92",
    "c226","c220",
    "c226","c221",
    "c226","c1020",
    "c238","c11",
    "c238","c14",
    "c238","c15",
    "c238","c18",
    "c238","c19",
    "c238","c20",
    "c238","c24",
    "c238","c26",
    "c238","c27",
    "c238","c35",
    "c238","c36",
    "c238","c37",
    "c238","c80",
    "c238","c231",
    "c238","c88",
    "c238","c89",
    "c238","c253",
    "c238","c91",
    "c238","c92",
    "c238","c220",
    "c238","c221",
    "c238","c1020",
    "c44","c46",
    "c44","c47",
    "c44","c49",
    "c44","c51",
    "c44","c52",
    "c44","c53",
    "c44","c55",
    "c44","c58",
    "c44","c59",
    "c44","c60",
    "c44","c61",
    "c44","c62",
    "c44","c64",
    "c44","c72",
    "c44","c73",
    "c44","c74",
    "c44","c741",
    "c44","c742",
    "c44","c746",
    "c44","c910",
    "c44","c261",
    "c44","c1009",
    "c44","c1013",
    "c44","c1058",
    "c44","c1059",
    "c45","c49",
    "c45","c61",
    "c45","c62",
    "c45","c64",
    "c45","c72",
    "c45","c73",
    "c45","c74",
    "c45","c741",
    "c45","c742",
    "c45","c910",
    "c45","c261",
    "c45","c1013",
    "c45","c1058",
    "c45","c1059",
    "c55","c1069",
    "c56","c49",
    "c56","c61",
    "c56","c62",
    "c56","c64",
    "c56","c72",
    "c56","c73",
    "c56","c74",
    "c56","c741",
    "c56","c742",
    "c56","c910",
    "c56","c261",
    "c56","c1013",
    "c56","c1058",
    "c56","c1059",
    "c57","c49",
    "c57","c61",
    "c57","c62",
    "c57","c64",
    "c57","c72",
    "c57","c73",
    "c57","c74",
    "c57","c741",
    "c57","c742",
    "c57","c910",
    "c57","c261",
    "c57","c1013",
    "c57","c1058",
    "c57","c1059",
    "c59","c49",
    "c59","c61",
    "c59","c62",
    "c59","c64",
    "c59","c72",
    "c59","c73",
    "c59","c74",
    "c59","c741",
    "c59","c742",
    "c59","c910",
    "c59","c261",
    "c59","c1058",
    "c69","c49",
    "c69","c61",
    "c69","c62",
    "c69","c64",
    "c69","c72",
    "c69","c73",
    "c69","c74",
    "c69","c741",
    "c69","c742",
    "c69","c910",
    "c69","c261",
    "c69","c1013",
    "c69","c1058",
    "c69","c1059",
    "c94","c99",
    "c94","c105",
    "c94","c106",
    "c94","c115",
    "c94","c116",
    "c94","c117",
    "c94","c118",
    "c94","c935",
    "c94","c998",
    "c95","c180",
    "c95","c97",
    "c95","c98",
    "c95","c99",
    "c95","c101",
    "c95","c103",
    "c95","c104",
    "c95","c105",
    "c95","c106",
    "c95","c109",
    "c95","c110",
    "c95","c113",
    "c95","c114",
    "c95","c115",
    "c95","c116",
    "c95","c117",
    "c95","c118",
    "c95","c935",
    "c95","c998",
    "c107","c99",
    "c107","c105",
    "c107","c106",
    "c107","c115",
    "c107","c116",
    "c107","c117",
    "c107","c118",
    "c107","c935",
    "c107","c998",
    "c108","c99",
    "c108","c105",
    "c108","c106",
    "c108","c115",
    "c108","c116",
    "c108","c117",
    "c108","c118",
    "c108","c935",
    "c108","c998",
    "c112","c99",
    "c112","c105",
    "c112","c106",
    "c112","c115",
    "c112","c116",
    "c112","c117",
    "c112","c118",
    "c112","c935",
    "c112","c998",
    "c127","c99",
    "c127","c105",
    "c127","c106",
    "c127","c115",
    "c127","c116",
    "c127","c117",
    "c127","c118",
    "c127","c935",
    "c127","c998",
    "c177","c184",
    "c177","c185",
    "c177","c257",
    "c177","c105",
    "c177","c188",
    "c177","c196",
    "c177","c197",
    "c177","c201",
    "c177","c203",
    "c177","c18",
    "c177","c467",
    "c177","c468",
    "c177","c106",
    "c177","c1180",
    "c178","c180",
    "c178","c252",
    "c178","c254",
    "c178","c184",
    "c178","c185",
    "c178","c257",
    "c178","c105",
    "c178","c188",
    "c178","c189",
    "c178","c191",
    "c178","c110",
    "c178","c193",
    "c178","c271",
    "c178","c196",
    "c178","c197",
    "c178","c198",
    "c178","c199",
    "c178","c200",
    "c178","c201",
    "c178","c203",
    "c178","c18",
    "c178","c467",
    "c178","c468",
    "c178","c106",
    "c178","c1180",
    "c179","c184",
    "c179","c185",
    "c179","c257",
    "c179","c105",
    "c179","c188",
    "c179","c196",
    "c179","c197",
    "c179","c201",
    "c179","c203",
    "c179","c18",
    "c179","c467",
    "c179","c468",
    "c179","c106",
    "c179","c1180",
    "c181","c184",
    "c181","c185",
    "c181","c257",
    "c181","c105",
    "c181","c188",
    "c181","c196",
    "c181","c197",
    "c181","c201",
    "c181","c203",
    "c181","c18",
    "c181","c467",
    "c181","c468",
    "c181","c106",
    "c181","c1180",
    "c195","c184",
    "c195","c185",
    "c195","c257",
    "c195","c105",
    "c195","c188",
    "c195","c196",
    "c195","c197",
    "c195","c201",
    "c195","c203",
    "c195","c18",
    "c195","c467",
    "c195","c468",
    "c195","c106",
    "c195","c1180",
    "c206","c184",
    "c206","c185",
    "c206","c257",
    "c206","c105",
    "c206","c188",
    "c206","c196",
    "c206","c197",
    "c206","c201",
    "c206","c203",
    "c206","c18",
    "c206","c467",
    "c206","c468",
    "c206","c106",
    "c206","c1180",
    "c210","c212",
    "c210","c217",
    "c210","c218",
    "c210","c223",
    "c210","c225",
    "c210","c227",
    "c210","c23",
    "c210","c230",
    "c210","c232",
    "c210","c233",
    "c210","c243",
    "c210","c247",
    "c210","c249",
    "c210","c767",
    "c210","c85",
    "c210","c931",
    "c211","c212",
    "c211","c217",
    "c211","c223",
    "c211","c225",
    "c211","c227",
    "c211","c230",
    "c211","c232",
    "c211","c233",
    "c211","c243",
    "c211","c247",
    "c211","c249",
    "c211","c767",
    "c211","c85",
    "c211","c931",
    "c213","c215",
    "c213","c219",
    "c213","c225",
    "c213","c227",
    "c213","c228",
    "c213","c232",
    "c213","c233",
    "c213","c243",
    "c213","c247",
    "c213","c249",
    "c213","c767",
    "c213","c931",
    "c214","c212",
    "c214","c217",
    "c214","c218",
    "c214","c225",
    "c214","c227",
    "c214","c23",
    "c214","c230",
    "c214","c232",
    "c214","c233",
    "c214","c243",
    "c214","c247",
    "c214","c249",
    "c214","c767",
    "c214","c85",
    "c214","c931",
    "c216","c243",
    "c217","c232",
    "c218","c220",
    "c218","c221",
    "c218","c233",
    "c218","c249",
    "c223","c231",
    "c224","c770",
    "c226","c225",
    "c226","c227",
    "c226","c232",
    "c226","c233",
    "c226","c243",
    "c226","c247",
    "c226","c249",
    "c226","c767",
    "c226","c85",
    "c226","c931",
    "c228","c249",
    "c238","c225",
    "c238","c227",
    "c238","c232",
    "c238","c233",
    "c238","c243",
    "c238","c247",
    "c238","c249",
    "c238","c767",
    "c238","c85",
    "c238","c931",
    "c1007","c184",
    "c1007","c185",
    "c1007","c257",
    "c1007","c201",
    "c1007","c261",
    "c1007","c72",
    "c1007","c741",
    "c1007","c910",
    "c1007","c203",
    "c1007","c279",
    "c1007","c280",
    "c1007","c281",
    "c1007","c1037",
    "c1007","c1180",
    "c44","c252",
    "c44","c254",
    "c44","c184",
    "c44","c185",
    "c44","c257",
    "c44","c201",
    "c44","c271",
    "c44","c203",
    "c44","c279",
    "c44","c280",
    "c44","c281",
    "c44","c1037",
    "c44","c1180",
    "c45","c184",
    "c45","c185",
    "c45","c257",
    "c45","c201",
    "c45","c203",
    "c45","c279",
    "c45","c280",
    "c45","c281",
    "c45","c1037",
    "c45","c1180",
    "c181","c261",
    "c181","c72",
    "c181","c741",
    "c181","c910",
    "c181","c279",
    "c181","c280",
    "c181","c281",
    "c181","c1037",
    "c56","c184",
    "c56","c185",
    "c56","c257",
    "c56","c201",
    "c56","c203",
    "c56","c279",
    "c56","c280",
    "c56","c281",
    "c56","c1037",
    "c56","c1180",
    "c69","c184",
    "c69","c185",
    "c69","c257",
    "c69","c201",
    "c69","c203",
    "c69","c279",
    "c69","c280",
    "c69","c281",
    "c69","c1037",
    "c69","c1180",
    "c680","c685",
    "c680","c691",
    "c680","c692",
    "c680","c698",
    "c680","c699",
    "c680","c700",
    "c680","c701",
    "c680","c999",
    "c680","c1078",
    "c681","c682",
    "c681","c683",
    "c681","c685",
    "c681","c687",
    "c681","c689",
    "c681","c690",
    "c681","c691",
    "c681","c692",
    "c681","c695",
    "c681","c696",
    "c681","c698",
    "c681","c699",
    "c681","c700",
    "c681","c701",
    "c681","c732",
    "c681","c733",
    "c681","c734",
    "c681","c945",
    "c681","c946",
    "c681","c999",
    "c681","c1078",
    "c693","c685",
    "c693","c691",
    "c693","c692",
    "c693","c698",
    "c693","c699",
    "c693","c700",
    "c693","c701",
    "c693","c999",
    "c693","c1078",
    "c694","c685",
    "c694","c691",
    "c694","c692",
    "c694","c698",
    "c694","c699",
    "c694","c700",
    "c694","c701",
    "c694","c999",
    "c694","c1078",
    "c697","c685",
    "c697","c691",
    "c697","c692",
    "c697","c698",
    "c697","c699",
    "c697","c700",
    "c697","c701",
    "c697","c999",
    "c697","c1078",
    "c708","c685",
    "c708","c691",
    "c708","c692",
    "c708","c698",
    "c708","c699",
    "c708","c700",
    "c708","c701",
    "c708","c999",
    "c708","c1078",
    "c746","c1069",
    "c1007","c49",
    "c1007","c61",
    "c1007","c62",
    "c1007","c64",
    "c1007","c73",
    "c1007","c74",
    "c1007","c742",
    "c1007","c1013",
    "c1007","c1058",
    "c1007","c1059",
    "c1013","c1069",
    "c1023","c212",
    "c1023","c215",
    "c1023","c216",
    "c1023","c217",
    "c1023","c218",
    "c1023","c219",
    "c1023","c220",
    "c1023","c221",
    "c1023","c223",
    "c1023","c224",
    "c1023","c225",
    "c1023","c227",
    "c1023","c228",
    "c1023","c23",
    "c1023","c230",
    "c1023","c231",
    "c1023","c232",
    "c1023","c233",
    "c1023","c88",
    "c1023","c243",
    "c1023","c247",
    "c1023","c249",
    "c1023","c253",
    "c1023","c767",
    "c1023","c85",
    "c1023","c931",
    "c1023","c6",
    "c1023","c7",
    "c1023","c9",
    "c1023","c11",
    "c1023","c12",
    "c1023","c13",
    "c1023","c14",
    "c1023","c15",
    "c1023","c18",
    "c1023","c19",
    "c1023","c20",
    "c1023","c24",
    "c1023","c26",
    "c1023","c27",
    "c1023","c35",
    "c1023","c36",
    "c1023","c37",
    "c1023","c80",
    "c1023","c89",
    "c1023","c91",
    "c1023","c92",
    "c1023","c1020",
    "c1027","c46",
    "c1027","c47",
    "c1027","c49",
    "c1027","c51",
    "c1027","c52",
    "c1027","c53",
    "c1027","c55",
    "c1027","c58",
    "c1027","c59",
    "c1027","c60",
    "c1027","c61",
    "c1027","c62",
    "c1027","c64",
    "c1027","c72",
    "c1027","c73",
    "c1027","c74",
    "c1027","c741",
    "c1027","c742",
    "c1027","c746",
    "c1027","c910",
    "c1027","c261",
    "c1027","c1009",
    "c1027","c1013",
    "c1027","c1058",
    "c1027","c1059",
    "c1027","c252",
    "c1027","c254",
    "c1027","c184",
    "c1027","c185",
    "c1027","c257",
    "c1027","c201",
    "c1027","c271",
    "c1027","c203",
    "c1027","c279",
    "c1027","c280",
    "c1027","c281",
    "c1027","c1037",
    "c1027","c1180",
    "c1149","c46",
    "c1149","c252",
    "c1149","c254",
    "c1149","c184",
    "c1149","c185",
    "c1149","c257",
    "c1149","c201",
    "c1149","c60",
    "c1149","c51",
    "c1149","c261",
    "c1149","c59",
    "c1149","c58",
    "c1149","c72",
    "c1149","c47",
    "c1149","c52",
    "c1149","c741",
    "c1149","c910",
    "c1149","c271",
    "c1149","c203",
    "c1149","c279",
    "c1149","c280",
    "c1149","c281",
    "c1149","c1037",
    "c1149","c746",
    "c1149","c1180",
    "c1031","c180",
    "c1031","c252",
    "c1031","c254",
    "c1031","c184",
    "c1031","c185",
    "c1031","c257",
    "c1031","c105",
    "c1031","c188",
    "c1031","c189",
    "c1031","c191",
    "c1031","c110",
    "c1031","c193",
    "c1031","c271",
    "c1031","c196",
    "c1031","c197",
    "c1031","c198",
    "c1031","c199",
    "c1031","c200",
    "c1031","c201",
    "c1031","c203",
    "c1031","c18",
    "c1031","c467",
    "c1031","c468",
    "c1031","c106",
    "c1031","c1180",
    "c1032","c180",
    "c1032","c252",
    "c1032","c254",
    "c1032","c184",
    "c1032","c185",
    "c1032","c257",
    "c1032","c105",
    "c1032","c188",
    "c1032","c189",
    "c1032","c191",
    "c1032","c110",
    "c1032","c193",
    "c1032","c271",
    "c1032","c196",
    "c1032","c197",
    "c1032","c198",
    "c1032","c199",
    "c1032","c200",
    "c1032","c201",
    "c1032","c203",
    "c1032","c18",
    "c1032","c467",
    "c1032","c468",
    "c1032","c106",
    "c1032","c1180",
    "c1033","c180",
    "c1033","c97",
    "c1033","c98",
    "c1033","c99",
    "c1033","c101",
    "c1033","c103",
    "c1033","c104",
    "c1033","c105",
    "c1033","c106",
    "c1033","c109",
    "c1033","c110",
    "c1033","c113",
    "c1033","c114",
    "c1033","c115",
    "c1033","c116",
    "c1033","c117",
    "c1033","c118",
    "c1033","c935",
    "c1033","c998",
    "c1034","c180",
    "c1034","c97",
    "c1034","c98",
    "c1034","c99",
    "c1034","c101",
    "c1034","c103",
    "c1034","c104",
    "c1034","c105",
    "c1034","c106",
    "c1034","c109",
    "c1034","c110",
    "c1034","c113",
    "c1034","c114",
    "c1034","c115",
    "c1034","c116",
    "c1034","c117",
    "c1034","c118",
    "c1034","c722",
    "c1034","c935",
    "c1034","c998",
    "c1035","c682",
    "c1035","c683",
    "c1035","c685",
    "c1035","c687",
    "c1035","c689",
    "c1035","c690",
    "c1035","c691",
    "c1035","c692",
    "c1035","c695",
    "c1035","c696",
    "c1035","c698",
    "c1035","c699",
    "c1035","c700",
    "c1035","c701",
    "c1035","c732",
    "c1035","c733",
    "c1035","c734",
    "c1035","c945",
    "c1035","c946",
    "c1035","c999",
    "c1035","c1078",
    "c1036","c682",
    "c1036","c683",
    "c1036","c685",
    "c1036","c687",
    "c1036","c689",
    "c1036","c690",
    "c1036","c691",
    "c1036","c692",
    "c1036","c695",
    "c1036","c696",
    "c1036","c698",
    "c1036","c699",
    "c1036","c700",
    "c1036","c701",
    "c1036","c732",
    "c1036","c733",
    "c1036","c734",
    "c1036","c945",
    "c1036","c946",
    "c1036","c999",
    "c1036","c1078",
    "c1060","c682",
    "c1060","c683",
    "c1060","c685",
    "c1060","c687",
    "c1060","c689",
    "c1060","c690",
    "c1060","c691",
    "c1060","c692",
    "c1060","c695",
    "c1060","c696",
    "c1060","c698",
    "c1060","c699",
    "c1060","c700",
    "c1060","c701",
    "c1060","c732",
    "c1060","c733",
    "c1060","c734",
    "c1060","c945",
    "c1060","c946",
    "c1060","c999",
    "c1060","c1078",
    "c1089","c212",
    "c1090","c212",
    "c1149","c49",
    "c1149","c53",
    "c1149","c55",
    "c1149","c61",
    "c1149","c62",
    "c1149","c64",
    "c1149","c73",
    "c1149","c74",
    "c1149","c742",
    "c1149","c1009",
    "c1149","c1013",
    "c1149","c1058",
    "c1149","c1059",
    "c213","c214",
    "c6","c34",
    "c6","c35",
    "c6","c36",
    "c6","c92",
    "c6","c779",
    "c6","c838",
    "c6","c14",
    "c216","c34",
    "c216","c35",
    "c216","c36",
    "c216","c92",
    "c216","c779",
    "c216","c838",
    "c216","c14",
    "c212","c34",
    "c212","c35",
    "c212","c36",
    "c212","c92",
    "c212","c779",
    "c212","c838",
    "c212","c14",
    "c30","c7",
    "c30","c9",
    "c30","c224",
    "c30","c12",
    "c30","c13",
    "c30","c14",
    "c30","c15",
    "c30","c19",
    "c30","c20",
    "c30","c230",
    "c30","c23",
    "c30","c24",
    "c30","c34",
    "c30","c35",
    "c30","c36",
    "c30","c223",
    "c30","c217",
    "c30","c218",
    "c30","c88",
    "c30","c89",
    "c30","c253",
    "c30","c92",
    "c30","c221",
    "c30","c773",
    "c30","c779",
    "c30","c780",
    "c30","c769",
    "c30","c838",
    "c44","c45",
    "c47","c60",
    "c51","c52",
    "c51","c78",
    "c51","c741",
    "c51","c910",
    "c59","c78",
    "c64","c74",
    "c217","c218",
    "c85","c34",
    "c85","c35",
    "c85","c36",
    "c85","c92",
    "c85","c779",
    "c85","c838",
    "c85","c14",
    "c88","c89",
    "c95","c112",
    "c180","c116",
    "c180","c117",
    "c180","c126",
    "c97","c116",
    "c97","c117",
    "c97","c126",
    "c101","c116",
    "c101","c117",
    "c101","c126",
    "c105","c115",
    "c109","c116",
    "c109","c117",
    "c109","c126",
    "c123","c98",
    "c123","c103",
    "c123","c104",
    "c123","c106",
    "c123","c110",
    "c123","c113",
    "c123","c114",
    "c123","c115",
    "c123","c116",
    "c123","c117",
    "c123","c118",
    "c123","c126",
    "c123","c722",
    "c123","c723",
    "c123","c998",
    "c123","c1077",
    "c124","c106",
    "c124","c115",
    "c124","c116",
    "c124","c117",
    "c124","c118",
    "c124","c126",
    "c124","c723",
    "c124","c998",
    "c124","c1077",
    "c131","c132",
    "c171","c133",
    "c171","c148",
    "c171","c149",
    "c171","c150",
    "c171","c153",
    "c171","c162",
    "c171","c883",
    "c171","c898",
    "c171","c900",
    "c171","c904",
    "c171","c905",
    "c171","c963",
    "c171","c969",
    "c171","c1043",
    "c171","c1075",
    "c171","c1086",
    "c171","c1087",
    "c171","c1161",
    "c171","c1162",
    "c171","c1163",
    "c171","c1164",
    "c173","c133",
    "c173","c148",
    "c173","c149",
    "c173","c150",
    "c173","c153",
    "c173","c162",
    "c173","c883",
    "c173","c898",
    "c173","c900",
    "c173","c904",
    "c173","c905",
    "c173","c963",
    "c173","c969",
    "c173","c1043",
    "c173","c1075",
    "c173","c1086",
    "c173","c1087",
    "c173","c1161",
    "c173","c1162",
    "c173","c1163",
    "c173","c1164",
    "c174","c133",
    "c174","c148",
    "c174","c149",
    "c174","c150",
    "c174","c153",
    "c174","c162",
    "c174","c883",
    "c174","c898",
    "c174","c900",
    "c174","c904",
    "c174","c905",
    "c174","c963",
    "c174","c969",
    "c174","c1043",
    "c174","c1075",
    "c174","c1086",
    "c174","c1087",
    "c174","c1161",
    "c174","c1162",
    "c174","c1163",
    "c174","c1164",
    "c178","c179",
    "c180","c196",
    "c180","c197",
    "c189","c196",
    "c189","c197",
    "c196","c197",
    "c199","c196",
    "c199","c197",
    "c200","c196",
    "c200","c197",
    "c205","c252",
    "c205","c254",
    "c205","c257",
    "c205","c188",
    "c205","c191",
    "c205","c110",
    "c205","c193",
    "c205","c271",
    "c205","c196",
    "c205","c197",
    "c205","c198",
    "c205","c201",
    "c205","c203",
    "c205","c467",
    "c205","c106",
    "c212","c227",
    "c212","c233",
    "c212","c241",
    "c212","c249",
    "c212","c837",
    "c212","c892",
    "c212","c893",
    "c212","c894",
    "c212","c895",
    "c215","c227",
    "c215","c233",
    "c215","c241",
    "c215","c249",
    "c215","c837",
    "c215","c892",
    "c215","c893",
    "c215","c894",
    "c215","c895",
    "c216","c227",
    "c216","c233",
    "c216","c241",
    "c216","c249",
    "c216","c837",
    "c216","c892",
    "c216","c893",
    "c216","c894",
    "c216","c895",
    "c220","c221",
    "c228","c227",
    "c228","c233",
    "c228","c241",
    "c228","c837",
    "c228","c892",
    "c228","c893",
    "c228","c894",
    "c228","c895",
    "c237","c217",
    "c237","c218",
    "c237","c219",
    "c237","c221",
    "c237","c223",
    "c237","c224",
    "c237","c225",
    "c237","c227",
    "c237","c23",
    "c237","c230",
    "c237","c232",
    "c237","c233",
    "c237","c88",
    "c237","c241",
    "c237","c249",
    "c237","c253",
    "c237","c769",
    "c237","c773",
    "c237","c837",
    "c237","c892",
    "c237","c893",
    "c237","c894",
    "c237","c895",
    "c237","c931",
    "c46","c741",
    "c46","c910",
    "c46","c1037",
    "c51","c1037",
    "c59","c1037",
    "c741","c910",
    "c275","c252",
    "c275","c254",
    "c275","c257",
    "c275","c201",
    "c275","c60",
    "c275","c58",
    "c275","c72",
    "c275","c47",
    "c275","c52",
    "c275","c741",
    "c275","c910",
    "c275","c271",
    "c275","c203",
    "c275","c279",
    "c275","c1037",
    "c275","c746",
    "c681","c697",
    "c682","c699",
    "c682","c700",
    "c682","c703",
    "c682","c1061",
    "c683","c699",
    "c683","c700",
    "c683","c703",
    "c683","c1061",
    "c687","c699",
    "c687","c700",
    "c687","c703",
    "c687","c1061",
    "c691","c698",
    "c695","c699",
    "c695","c700",
    "c695","c703",
    "c695","c1061",
    "c704","c689",
    "c704","c690",
    "c704","c692",
    "c704","c696",
    "c704","c698",
    "c704","c699",
    "c704","c700",
    "c704","c701",
    "c704","c703",
    "c704","c732",
    "c704","c733",
    "c704","c734",
    "c704","c945",
    "c704","c946",
    "c704","c999",
    "c704","c1017",
    "c704","c1019",
    "c704","c1061",
    "c704","c1078",
    "c704","c1084",
    "c705","c692",
    "c705","c698",
    "c705","c699",
    "c705","c700",
    "c705","c701",
    "c705","c703",
    "c705","c999",
    "c705","c1017",
    "c705","c1019",
    "c705","c1061",
    "c705","c1078",
    "c705","c1084",
    "c772","c227",
    "c772","c233",
    "c772","c241",
    "c772","c249",
    "c772","c837",
    "c772","c892",
    "c772","c893",
    "c772","c894",
    "c772","c895",
    "c777","c778",
    "c875","c34",
    "c875","c35",
    "c875","c36",
    "c875","c92",
    "c875","c779",
    "c875","c838",
    "c875","c14",
    "c1008","c47",
    "c1008","c49",
    "c1008","c52",
    "c1008","c53",
    "c1008","c55",
    "c1008","c58",
    "c1008","c60",
    "c1008","c61",
    "c1008","c62",
    "c1008","c72",
    "c1008","c74",
    "c1008","c78",
    "c1008","c741",
    "c1008","c742",
    "c1008","c746",
    "c1008","c910",
    "c1008","c1069",
    "c1009","c78",
    "c1009","c741",
    "c1009","c910",
    "c1013","c78",
    "c1013","c741",
    "c1013","c910",
    "c1023","c241",
    "c1023","c773",
    "c1023","c837",
    "c1023","c892",
    "c1023","c893",
    "c1023","c894",
    "c1023","c895",
    "c1023","c34",
    "c1023","c779",
    "c1023","c838",
    "c1027","c78",
    "c1027","c1007",
    "c1031","c177",
    "c1033","c94",
    "c1033","c126",
    "c1034","c126",
    "c1035","c703",
    "c1035","c1061",
    "c1036","c703",
    "c1036","c1061",
    "c1050","c15",
    "c1050","c19",
    "c1050","c20",
    "c1050","c24",
    "c1050","c34",
    "c1050","c35",
    "c1050","c36",
    "c1050","c88",
    "c1050","c89",
    "c1050","c253",
    "c1050","c92",
    "c1050","c221",
    "c1050","c779",
    "c1050","c780",
    "c1050","c769",
    "c1050","c838",
    "c1050","c230",
    "c1050","c14",
    "c1051","c227",
    "c1051","c233",
    "c1051","c241",
    "c1051","c249",
    "c1051","c837",
    "c1051","c892",
    "c1051","c893",
    "c1051","c894",
    "c1051","c895",
    "c1052","c221",
    "c1052","c225",
    "c1052","c227",
    "c1052","c232",
    "c1052","c233",
    "c1052","c88",
    "c1052","c241",
    "c1052","c249",
    "c1052","c253",
    "c1052","c837",
    "c1052","c892",
    "c1052","c893",
    "c1052","c894",
    "c1052","c895",
    "c1052","c931",
    "c1060","c703",
    "c1060","c1061",
    "c1089","c218",
    "c1089","c223",
    "c1089","c224",
    "c1089","c227",
    "c1089","c233",
    "c1089","c241",
    "c1089","c249",
    "c1089","c773",
    "c1089","c837",
    "c1089","c892",
    "c1089","c893",
    "c1089","c894",
    "c1089","c895",
    "c1090","c218",
    "c1090","c223",
    "c1090","c224",
    "c1090","c227",
    "c1090","c233",
    "c1090","c241",
    "c1090","c249",
    "c1090","c773",
    "c1090","c837",
    "c1090","c892",
    "c1090","c893",
    "c1090","c894",
    "c1090","c895",
    "c1089","c12",
    "c1089","c13",
    "c1089","c14",
    "c1089","c34",
    "c1089","c35",
    "c1089","c36",
    "c1089","c92",
    "c1089","c779",
    "c1089","c838",
    "c1090","c12",
    "c1090","c13",
    "c1090","c14",
    "c1090","c34",
    "c1090","c35",
    "c1090","c36",
    "c1090","c92",
    "c1090","c779",
    "c1090","c838",
    "c1144","c1145",
    "c1149","c78",
    0,0
};

/// Undesired Courses
const Course undesired_coursesUD1[] = {
    {"c1023", 1},
    {"c963", 2},
    {"c1077", 0},
    {"c184", 2},
    {"c133", 1},
    {"c239", 1},
    {"c198", 1},
    {"c1155", 2},
    {"c723", 2},
    {"c72", 1},
    {"c13", 0},
    {"c71", 2},
    {"c80", 1},
    {"c64", 0},
    {"c1192", 0},
    {"c271", 2},
    {"c703", 0},
    {"c723", 1},
    {"c249", 2},
    {"c149", 2},
    {"c278", 2},
    {"c211", 2},
    {"c137", 1},
    {"c998", 2},
    {"c36", 2},
    {"c278", 0},
    {"c101", 1},
    {"c1059", 1},
    {"c34", 0},
    {"c231", 0},
    {"c117", 2},
    {"c1069", 2},
    {"c127", 1},
    {"c203", 2},
    {"c280", 0},
    {"c224", 2},
    {"c1089", 2},
    {"c143", 2},
    {"c732", 1},
    {"c780", 0},
    {"c225", 2},
    {"c1018", 0},
    {"c114", 2},
    {"c193", 2},
    {"c1156", 1},
    {"c746", 2},
    {"c779", 2},
    {"c241", 0},
    {"c1152", 2},
    {"c74", 2},
    {"c705", 0},
    {"c969", 0},
    {"c227", 0},
    {"c98", 0},
    {"c681", 1},
    {"c91", 2},
    {"c55", 0},
    {"c252", 2},
    {"c1170", 2},
    {"c779", 1},
    {"c904", 1},
    {"c150", 0},
    {"c693", 0},
    {"c77", 2},
    {"c62", 2},
    {"c88", 2},
    {"c37", 2},
    {"c30", 1},
    {"c94", 0},
    {"c978", 2},
    {"c732", 2},
    {"c51", 0},
    {"c275", 0},
    {"c36", 0},
    {"c232", 2},
    {"c690", 2},
    {"c29", 0},
    {"c1059", 0},
    {"c1043", 0},
    {"c7", 2},
    {"c696", 0},
    {"c88", 1},
    {"c1078", 2},
    {"c197", 1},
    {"c691", 1},
    {"c279", 2},
    {"c163", 2},
    {"c691", 2},
    {"c901", 1},
    {"c20", 2},
    {0,0}
};

/// Number of periods
//int p;
/// Minimum academic load
//int a;
/// Maximum academic load
//int b;
/// Minimum amount of courses
//int c;
/// Maximum amount of courses
//int d;

/// The example specifications
const Curriculum curriculum[]= {
    {
        8, 10, 24, 2, 10,
        courses8, prereqs8, undesired_courses8
    },
    {
        10, 10, 24, 2, 10,
        courses10, prereqs10, undesired_courses10
    },
    {
        12, 10, 24, 2, 10,
        courses12, prereqs12, undesired_courses12
    },
    {
        9, 10, 24, 2, 6,
        coursesUD1, prereqsUD1, undesired_coursesUD1
    }
};

/// The number of examples
const unsigned int n_examples_bacp = sizeof(curriculum) / sizeof(Curriculum);

//@}

}

/**
 * \brief %Example: The balanced academic curriculum problem
 *
 * This is problem 030 from http://www.csplib.org/.
 *
 * A custom value selection from "A CP Approach to the Balanced
 * Academic Curriculum Problem", J.N. Monette, P. Schaus, S. Zampelli,
 * Y. Deville, and P. Dupont is available.
 *
 * \ingroup Example
 *
 */
class BACP : public MyFlatZincSpace {
protected:
    /// The curriculum to be scheduled
    const Curriculum curr;

    /// Academic load for each period
    IntVarArray l;
    /// Maximum academic load
    //IntVar u;
    /// Number of courses assigned to a period
    IntVarArray q;

    /// Period to which a course is assigned
    //IntVarArray x;
public:
    /// Branching variants
    enum branch_opt {
        BRANCHING_NAIVE,    ///< Simple fail-first branching
        BRANCHING_LOAD,     ///< Place based on minimum-load
        BRANCHING_LOAD_REV, ///< Place based on maximum-load
    } br;

    static MyFlatZincSpace* getInstance(MyFlatZincOptions& opt) {

        if (opt.nsize() >= n_examples_bacp) {
            std::cerr << "Error number problem: size must be between 0 and " << n_examples_bacp - 1 << std::endl;
            exit(-1);
        }

        string name_instance("bacp_" + stl_util::Convert2String(opt.nsize()));
        opt.name(name_instance.c_str());

        opt.branching(BACP::BRANCHING_NAIVE);
        /*
        opt.branching(BACP::BRANCHING_NAIVE,"naive");
        opt.branching(BACP::BRANCHING_LOAD,"load");
        opt.branching(BACP::BRANCHING_LOAD_REV,"load-reverse");
        opt.size(2);
        */

        return new BACP(opt);
    }

    /// Actual model
    BACP(const MyFlatZincOptions& opt) : MyFlatZincSpace(), curr(curriculum[opt.nsize()]), br(static_cast<branch_opt>(opt.branching())) {
        std::map<std::string, int> courseMap; // Map names to course numbers
        int maxCredit = 0;
        int numberOfCourses = 0;
        for (const Course* co=curr.courses; co->name != 0; co++) {
            courseMap[co->name] = numberOfCourses++;
            maxCredit += co->credit;
        }

        int p = curr.p;
        int a = curr.a;
        int b = curr.b;
        int c = curr.c;
        int d = curr.d;

        l = IntVarArray(*this, p, a, b);
        q = IntVarArray(*this, p, c, d);
        iv = IntVarArray(*this, numberOfCourses + 1, 0, p-1);

        /// Var args
        IntVarArgs x;
        for(int i = 0; i < numberOfCourses; i++) {
            iv[i] = IntVar(*this, 0, p-1);
            x << iv[i];
        }
        _method = MIN;
        _optVar = iv.size()-1;
        intVarCount = iv.size() + l.size() + q.size() + 1;
        boolVarCount = setVarCount = floatVarCount = 0;

        iv[_optVar] = IntVar(*this, 0, maxCredit);
        IntVar& u = iv[_optVar];

        for (int j=0; j<p; j++) {
            BoolVarArgs xij(*this, numberOfCourses, 0, 1);
            IntArgs t(numberOfCourses);
            for (int i=0; i<numberOfCourses; i++) {
                rel(*this, (x[i]==j) == xij[i]);
                t[i] = curr.courses[i].credit;
            }
            // sum over all t*(xi==j) is load of period i
            linear(*this, t, xij, IRT_EQ, l[j]);
            // sum over all (xi==j) is number of courses in period i
            linear(*this, xij, IRT_EQ, q[j]);
        }

        // Precedence
        for (const char** prereq = curr.prereqs; *prereq != 0; prereq+=2)
            rel(*this, x[courseMap[*prereq]] < x[courseMap[*(prereq+1)]]);

        // Optimization criterion: minimize u
        max(*this, l, u);

        // Redundant constraints
        linear(*this, l, IRT_EQ, maxCredit);
        linear(*this, q, IRT_EQ, numberOfCourses);

        //add undesired period
        for (const Course* co=curr.undesired_courses; co->name != 0; co++) {
            rel(*this, x[courseMap[co->name]] != co->credit);
        }

    }

    void createBranchers() {
        // branching
        IntVarArgs x;
        for(int i = 0; i < iv.size()-1; i++) {
            x << iv[i];
        }
        switch (br) {
        case BRANCHING_NAIVE:
            branch(*this, x, INT_VAR_SIZE_MIN(), INT_VAL_MIN());
            break;
        case BRANCHING_LOAD:
            branch(*this, x, INT_VAR_SIZE_MIN(), INT_VAL(&load));
            break;
        case BRANCHING_LOAD_REV:
            branch(*this, x, INT_VAR_SIZE_MIN(), INT_VAL(&load_rev));
            break;
        }
    }
    /// Value selection function for load branching
    static int load(const Space& home, IntVar x, int) {
        const BACP& b = static_cast<const BACP&>(home);
        IntVarValues values(x);
        int val = -1;
        int best = Int::Limits::max+1;
        while (values()) {
            if (b.l[values.val()].min() < best) {
                val  = values.val();
                best = b.l[val].min();
            }
            ++values;
        }
        assert(val != -1);
        return val;
    }
    /// Value selection function for reverse load branching
    static int load_rev(const Space& home, IntVar x, int) {
        const BACP& b = static_cast<const BACP&>(home);
        IntVarValues values(x);
        int val = -1;
        int best = Int::Limits::min-1;
        while (values()) {
            if (b.l[values.val()].min() > best) {
                val  = values.val();
                best = b.l[val].min();
            }
            ++values;
        }
        assert(val != -1);
        return val;
    }
    /// Constructor for copying \a bacp
    BACP(bool share, BACP& bacp) : MyFlatZincSpace(share,bacp),
        curr(bacp.curr) {
        l.update(*this, share, bacp.l);
        //u.update(*this, share, bacp.u);
        //x.update(*this, share, bacp.x);
    }
    /// Copy during cloning
    virtual Space*
    copy(bool share) {
        return new BACP(share,*this);
    }

    /// Print solution
    virtual void
    print(std::ostream& os) const {
        std::vector<std::list<int> > period(curr.p);
        for (int i=iv.size(); i--;)
            period[iv[i].val()].push_back(i);

        os << "Solution with load " << iv[_optVar].val() << ":" << std::endl;
        for (int i=0; i<curr.p; i++) {
            os << "\tPeriod "<<i+1<<": ";
            for (std::list<int>::iterator v=period[i].begin();
                    v != period[i].end(); ++v) {
                os << curr.courses[*v].name << " ";
            }
            os << std::endl;
        }
        os << std::endl;
    }

};

#endif