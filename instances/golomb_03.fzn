predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..8: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..9: INT____00002 :: is_defined_var :: var_is_introduced;
var 1..9: INT____00003 :: is_defined_var :: var_is_introduced;
array [1..3] of var 0..9: differences = [INT____00001, INT____00002, INT____00003];
array [1..3] of var 0..9: mark :: output_array([1..3]);
constraint all_different_int(differences);
constraint int_eq(mark[1], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00001, mark[1], mark[2]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00002, mark[1], mark[3]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, -1, 1], [INT____00003, mark[2], mark[3]], 0) :: defines_var(INT____00003);
constraint int_lt(INT____00001, INT____00003);
constraint int_lt(mark[1], mark[2]);
constraint int_lt(mark[2], mark[3]);
solve  :: int_search(mark, input_order, indomain, complete) minimize mark[3];
