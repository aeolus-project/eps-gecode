predicate all_different_int(array [int] of var int: x);
predicate count(array [int] of var int: x, var int: y, var int: c);
predicate fixed_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, int: b);
predicate global_cardinality(array [int] of var int: x, array [int] of int: cover, array [int] of var int: counts);
predicate maximum_int(var int: m, array [int] of var int: x);
predicate minimum_int(var int: m, array [int] of var int: x);
predicate sort(array [int] of var int: x, array [int] of var int: y);
predicate table_bool(array [int] of var bool: x, array [int, int] of bool: t);
predicate table_int(array [int] of var int: x, array [int, int] of int: t);
predicate var_cumulative(array [int] of var int: s, array [int] of int: d, array [int] of int: r, var int: b);
var 0..80: INT____00001 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00002 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00003 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00004 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00005 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00006 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00007 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00008 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00009 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00010 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00011 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00012 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00013 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00014 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00015 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00016 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00017 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00018 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00019 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00020 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00021 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00022 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00023 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00024 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00025 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00026 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00027 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00028 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00029 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00030 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00031 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00032 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00033 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00034 :: is_defined_var :: var_is_introduced;
var 0..81: INT____00035 :: is_defined_var :: var_is_introduced;
var 1..81: INT____00036 :: is_defined_var :: var_is_introduced;
array [1..36] of var 0..81: differences
array [1..9] of var 0..81: mark :: output_array([1..9]);
constraint all_different_int(differences);
constraint int_eq(mark[1], 0);
constraint int_lin_eq([-1, -1, 1], [INT____00001, mark[1], mark[2]], 0) :: defines_var(INT____00001);
constraint int_lin_eq([-1, -1, 1], [INT____00002, mark[1], mark[3]], 0) :: defines_var(INT____00002);
constraint int_lin_eq([-1, -1, 1], [INT____00003, mark[1], mark[4]], 0) :: defines_var(INT____00003);
constraint int_lin_eq([-1, -1, 1], [INT____00004, mark[1], mark[5]], 0) :: defines_var(INT____00004);
constraint int_lin_eq([-1, -1, 1], [INT____00005, mark[1], mark[6]], 0) :: defines_var(INT____00005);
constraint int_lin_eq([-1, -1, 1], [INT____00006, mark[1], mark[7]], 0) :: defines_var(INT____00006);
constraint int_lin_eq([-1, -1, 1], [INT____00007, mark[1], mark[8]], 0) :: defines_var(INT____00007);
constraint int_lin_eq([-1, -1, 1], [INT____00008, mark[1], mark[9]], 0) :: defines_var(INT____00008);
constraint int_lin_eq([-1, -1, 1], [INT____00009, mark[2], mark[3]], 0) :: defines_var(INT____00009);
constraint int_lin_eq([-1, -1, 1], [INT____00010, mark[2], mark[4]], 0) :: defines_var(INT____00010);
constraint int_lin_eq([-1, -1, 1], [INT____00011, mark[2], mark[5]], 0) :: defines_var(INT____00011);
constraint int_lin_eq([-1, -1, 1], [INT____00012, mark[2], mark[6]], 0) :: defines_var(INT____00012);
constraint int_lin_eq([-1, -1, 1], [INT____00013, mark[2], mark[7]], 0) :: defines_var(INT____00013);
constraint int_lin_eq([-1, -1, 1], [INT____00014, mark[2], mark[8]], 0) :: defines_var(INT____00014);
constraint int_lin_eq([-1, -1, 1], [INT____00015, mark[2], mark[9]], 0) :: defines_var(INT____00015);
constraint int_lin_eq([-1, -1, 1], [INT____00016, mark[3], mark[4]], 0) :: defines_var(INT____00016);
constraint int_lin_eq([-1, -1, 1], [INT____00017, mark[3], mark[5]], 0) :: defines_var(INT____00017);
constraint int_lin_eq([-1, -1, 1], [INT____00018, mark[3], mark[6]], 0) :: defines_var(INT____00018);
constraint int_lin_eq([-1, -1, 1], [INT____00019, mark[3], mark[7]], 0) :: defines_var(INT____00019);
constraint int_lin_eq([-1, -1, 1], [INT____00020, mark[3], mark[8]], 0) :: defines_var(INT____00020);
constraint int_lin_eq([-1, -1, 1], [INT____00021, mark[3], mark[9]], 0) :: defines_var(INT____00021);
constraint int_lin_eq([-1, -1, 1], [INT____00022, mark[4], mark[5]], 0) :: defines_var(INT____00022);
constraint int_lin_eq([-1, -1, 1], [INT____00023, mark[4], mark[6]], 0) :: defines_var(INT____00023);
constraint int_lin_eq([-1, -1, 1], [INT____00024, mark[4], mark[7]], 0) :: defines_var(INT____00024);
constraint int_lin_eq([-1, -1, 1], [INT____00025, mark[4], mark[8]], 0) :: defines_var(INT____00025);
constraint int_lin_eq([-1, -1, 1], [INT____00026, mark[4], mark[9]], 0) :: defines_var(INT____00026);
constraint int_lin_eq([-1, -1, 1], [INT____00027, mark[5], mark[6]], 0) :: defines_var(INT____00027);
constraint int_lin_eq([-1, -1, 1], [INT____00028, mark[5], mark[7]], 0) :: defines_var(INT____00028);
constraint int_lin_eq([-1, -1, 1], [INT____00029, mark[5], mark[8]], 0) :: defines_var(INT____00029);
constraint int_lin_eq([-1, -1, 1], [INT____00030, mark[5], mark[9]], 0) :: defines_var(INT____00030);
constraint int_lin_eq([-1, -1, 1], [INT____00031, mark[6], mark[7]], 0) :: defines_var(INT____00031);
constraint int_lin_eq([-1, -1, 1], [INT____00032, mark[6], mark[8]], 0) :: defines_var(INT____00032);
constraint int_lin_eq([-1, -1, 1], [INT____00033, mark[6], mark[9]], 0) :: defines_var(INT____00033);
constraint int_lin_eq([-1, -1, 1], [INT____00034, mark[7], mark[8]], 0) :: defines_var(INT____00034);
constraint int_lin_eq([-1, -1, 1], [INT____00035, mark[7], mark[9]], 0) :: defines_var(INT____00035);
constraint int_lin_eq([-1, -1, 1], [INT____00036, mark[8], mark[9]], 0) :: defines_var(INT____00036);
constraint int_lt(INT____00001, INT____00036);
constraint int_lt(mark[1], mark[2]);
constraint int_lt(mark[2], mark[3]);
constraint int_lt(mark[3], mark[4]);
constraint int_lt(mark[4], mark[5]);
constraint int_lt(mark[5], mark[6]);
constraint int_lt(mark[6], mark[7]);
constraint int_lt(mark[7], mark[8]);
constraint int_lt(mark[8], mark[9]);
solve  :: int_search(mark, input_order, indomain, complete) minimize mark[9];
